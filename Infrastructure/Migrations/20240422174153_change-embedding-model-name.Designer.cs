// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ClusterizationDbContext))]
    [Migration("20240422174153_change-embedding-model-name")]
    partial class changeembeddingmodelname
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ClusterMyDataObject", b =>
                {
                    b.Property<int>("ClustersId")
                        .HasColumnType("int");

                    b.Property<long>("DataObjectsId")
                        .HasColumnType("bigint");

                    b.HasKey("ClustersId", "DataObjectsId");

                    b.HasIndex("DataObjectsId");

                    b.ToTable("ClusterMyDataObject");
                });

            modelBuilder.Entity("ClusterizationWorkspaceMyDataObject", b =>
                {
                    b.Property<long>("DataObjectsId")
                        .HasColumnType("bigint");

                    b.Property<int>("WorkspacesId")
                        .HasColumnType("int");

                    b.HasKey("DataObjectsId", "WorkspacesId");

                    b.HasIndex("WorkspacesId");

                    b.ToTable("ClusterizationWorkspaceMyDataObject");
                });

            modelBuilder.Entity("Domain.Entities.Clusterization.Algorithms.ClusterizationAbstactAlgorithm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("nvarchar(34)");

                    b.Property<string>("TypeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("ClusterizationAbstractAlgorithms");

                    b.HasDiscriminator<string>("Discriminator").HasValue("ClusterizationAbstactAlgorithm");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Domain.Entities.Clusterization.Algorithms.ClusterizationAlgorithmType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ClusterizationAlgorithmTypes");

                    b.HasData(
                        new
                        {
                            Id = "KMeans",
                            Description = "Arrangement of a set of objects into relatively homogeneous groups.",
                            Name = "k-means"
                        },
                        new
                        {
                            Id = "OneCluster",
                            Description = "Combining all elements into one cluster",
                            Name = "One cluster"
                        },
                        new
                        {
                            Id = "DBSCAN",
                            Description = "Density-Based Spatial Clustering Of Applications With Noise",
                            Name = "DBSCAN"
                        },
                        new
                        {
                            Id = "SpectralClustering",
                            Description = "Spectral clustering is based on the principles of graph theory and linear algebra",
                            Name = "Spectral Clustering"
                        },
                        new
                        {
                            Id = "GaussianMixture",
                            Description = "A clustering method that models the data as a mixture of Gaussian partitions",
                            Name = "Gaussian Mixture"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Clusterization.Cluster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentClusterId")
                        .HasColumnType("int");

                    b.Property<int>("ProfileId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentClusterId");

                    b.HasIndex("ProfileId");

                    b.ToTable("Clusters");
                });

            modelBuilder.Entity("Domain.Entities.Clusterization.ClusterizationType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ClusterizationTypes");

                    b.HasData(
                        new
                        {
                            Id = "Comments",
                            Name = "Comments"
                        },
                        new
                        {
                            Id = "External",
                            Name = "From file"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Clusterization.Displaying.ClusterizationTile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Length")
                        .HasColumnType("float");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int>("ProfileId")
                        .HasColumnType("int");

                    b.Property<int>("TilesLevelId")
                        .HasColumnType("int");

                    b.Property<int>("X")
                        .HasColumnType("int");

                    b.Property<int>("Y")
                        .HasColumnType("int");

                    b.Property<int>("Z")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("ProfileId");

                    b.HasIndex("TilesLevelId");

                    b.ToTable("ClusterizationTiles");
                });

            modelBuilder.Entity("Domain.Entities.Clusterization.Displaying.ClusterizationTilesLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("MaxXValue")
                        .HasColumnType("float");

                    b.Property<double>("MaxYValue")
                        .HasColumnType("float");

                    b.Property<double>("MinXValue")
                        .HasColumnType("float");

                    b.Property<double>("MinYValue")
                        .HasColumnType("float");

                    b.Property<int>("ProfileId")
                        .HasColumnType("int");

                    b.Property<int>("TileCount")
                        .HasColumnType("int");

                    b.Property<double>("TileLength")
                        .HasColumnType("float");

                    b.Property<int>("Z")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.ToTable("ClusterizationTilesLevels");
                });

            modelBuilder.Entity("Domain.Entities.Clusterization.Displaying.DisplayedPoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClusterId")
                        .HasColumnType("int");

                    b.Property<long>("DataObjectId")
                        .HasColumnType("bigint");

                    b.Property<int>("OptimizationLevel")
                        .HasColumnType("int");

                    b.Property<int>("TileId")
                        .HasColumnType("int");

                    b.Property<double>("X")
                        .HasColumnType("float");

                    b.Property<double>("Y")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ClusterId");

                    b.HasIndex("DataObjectId");

                    b.HasIndex("TileId");

                    b.ToTable("DisplayedPoints");
                });

            modelBuilder.Entity("Domain.Entities.Clusterization.Profiles.ClusterizationProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AlgorithmId")
                        .HasColumnType("int");

                    b.Property<string>("ChangingType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DRTechniqueId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("DimensionCount")
                        .HasColumnType("int");

                    b.Property<int>("EmbeddingLoadingStateId")
                        .HasColumnType("int");

                    b.Property<string>("EmbeddingModelId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsCalculated")
                        .HasColumnType("bit");

                    b.Property<bool>("IsElected")
                        .HasColumnType("bit");

                    b.Property<int>("MaxTileLevel")
                        .HasColumnType("int");

                    b.Property<int>("MinTileLevel")
                        .HasColumnType("int");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("VisibleType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WorkspaceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AlgorithmId");

                    b.HasIndex("DRTechniqueId");

                    b.HasIndex("DimensionCount");

                    b.HasIndex("EmbeddingModelId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("WorkspaceId");

                    b.ToTable("ClusterizationProfiles");
                });

            modelBuilder.Entity("Domain.Entities.Clusterization.Workspaces.ClusterizationWorkspace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ChangingType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EntitiesCount")
                        .HasColumnType("int");

                    b.Property<bool>("IsAllDataEmbedded")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEdited")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastDeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastEditTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("VisibleType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("TypeId");

                    b.ToTable("ClusterizationWorkspaces");
                });

            modelBuilder.Entity("Domain.Entities.Clusterization.Workspaces.WorkspaceDataObjectsAddPack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("DataObjectsCount")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEdited")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastDeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastEditTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("WorkspaceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("WorkspaceId");

                    b.ToTable("WorkspaceDataObjectsAddPacks");
                });

            modelBuilder.Entity("Domain.Entities.Customers.Customer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEdited")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastDeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastEditTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.DataObjects.MyDataObject", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CommentId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExternalObjectId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("MyDataObject");
                });

            modelBuilder.Entity("Domain.Entities.DataObjects.MyDataObjectType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MyDataObjectType");

                    b.HasData(
                        new
                        {
                            Id = "Comment",
                            Name = "Comment"
                        },
                        new
                        {
                            Id = "ExternalData",
                            Name = "External Data"
                        });
                });

            modelBuilder.Entity("Domain.Entities.DataSources.ExternalData.ExternalObject", b =>
                {
                    b.Property<string>("FullId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("DataObjectId")
                        .HasColumnType("bigint");

                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Session")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FullId");

                    b.HasIndex("DataObjectId")
                        .IsUnique();

                    b.ToTable("ExternalObjects");
                });

            modelBuilder.Entity("Domain.Entities.DataSources.Youtube.Channel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ChannelImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ETag")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LoadedCommentCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("LoadedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LoadedVideoCount")
                        .HasColumnType("int");

                    b.Property<string>("LoaderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("PublishedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTimeOffset>("PublishedAtDateTimeOffset")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("PublishedAtRaw")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("SubscriberCount")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VideoCount")
                        .HasColumnType("int");

                    b.Property<long>("ViewCount")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("LoaderId");

                    b.HasIndex("PublishedAtDateTimeOffset", "VideoCount", "SubscriberCount");

                    b.ToTable("Channels");
                });

            modelBuilder.Entity("Domain.Entities.DataSources.Youtube.Comment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AuthorChannelId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AuthorChannelUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AuthorDisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AuthorProfileImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CanReply")
                        .HasColumnType("bit");

                    b.Property<string>("ChannelId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<long?>("DataObjectId")
                        .HasColumnType("bigint");

                    b.Property<string>("ETag")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LikeCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("LoadedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LoaderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("PublishedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTimeOffset>("PublishedAtDateTimeOffset")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("PublishedAtRaw")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TextDisplay")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TextOriginal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("TotalReplyCount")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTimeOffset>("UpdatedAtDateTimeOffset")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdatedAtRaw")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VideoId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.HasIndex("DataObjectId")
                        .IsUnique()
                        .HasFilter("[DataObjectId] IS NOT NULL");

                    b.HasIndex("LoaderId");

                    b.HasIndex("PublishedAtDateTimeOffset");

                    b.HasIndex("VideoId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Domain.Entities.DataSources.Youtube.Video", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChannelId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ChannelTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CommentCount")
                        .HasColumnType("int");

                    b.Property<string>("DefaultAudioLanguage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DefaultLanguage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ETag")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LikeCount")
                        .HasColumnType("int");

                    b.Property<string>("LiveBroadcaseContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LoadedCommentCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("LoadedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LoaderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("PublishedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTimeOffset>("PublishedAtDateTimeOffset")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("PublishedAtRaw")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VideoImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ViewCount")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.HasIndex("LoaderId");

                    b.HasIndex("PublishedAtDateTimeOffset", "CommentCount", "ViewCount");

                    b.ToTable("Videos");
                });

            modelBuilder.Entity("Domain.Entities.DimensionalityReductionEntities.DimensionalityReductionTechnique", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DimensionalityReductionTechniques");

                    b.HasData(
                        new
                        {
                            Id = "PCA",
                            Name = "Principal Component Analysis"
                        },
                        new
                        {
                            Id = "t-SNE",
                            Name = "t-Distributed Stochastic Neighbor Embedding"
                        },
                        new
                        {
                            Id = "JSL",
                            Name = "Johnson-Lindenstrauss lemma"
                        });
                });

            modelBuilder.Entity("Domain.Entities.EmbeddingModels.EmbeddingModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DimensionTypeId")
                        .HasColumnType("int");

                    b.Property<int>("MaxInputCount")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuotasPrice")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DimensionTypeId");

                    b.ToTable("EmbeddingModels");

                    b.HasData(
                        new
                        {
                            Id = "text-embedding-ada-002",
                            Description = "Text embedding Ada 002",
                            DimensionTypeId = 1536,
                            MaxInputCount = 4000,
                            Name = "text-embedding-ada-002",
                            QuotasPrice = 5
                        },
                        new
                        {
                            Id = "text-embedding-3-large",
                            Description = "Text embedding 3 large",
                            DimensionTypeId = 3072,
                            MaxInputCount = 4000,
                            Name = "text_embedding_3_large",
                            QuotasPrice = 8
                        },
                        new
                        {
                            Id = "text-embedding-3-small",
                            Description = "Text embedding 3 small",
                            DimensionTypeId = 1536,
                            MaxInputCount = 4000,
                            Name = "text_embedding_3_small",
                            QuotasPrice = 1
                        });
                });

            modelBuilder.Entity("Domain.Entities.Embeddings.DimensionEntities.DimensionEmbeddingObject", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("EmbeddingObjectsGroupId")
                        .HasColumnType("bigint");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.Property<string>("ValuesString")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmbeddingObjectsGroupId");

                    b.HasIndex("TypeId");

                    b.ToTable("DimensionEmbeddingObjects");
                });

            modelBuilder.Entity("Domain.Entities.Embeddings.DimensionEntities.DimensionType", b =>
                {
                    b.Property<int>("DimensionCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DimensionCount"));

                    b.HasKey("DimensionCount");

                    b.ToTable("DimensionTypes");

                    b.HasData(
                        new
                        {
                            DimensionCount = 2
                        },
                        new
                        {
                            DimensionCount = 3
                        },
                        new
                        {
                            DimensionCount = 100
                        },
                        new
                        {
                            DimensionCount = 1536
                        },
                        new
                        {
                            DimensionCount = 3072
                        });
                });

            modelBuilder.Entity("Domain.Entities.Embeddings.EmbeddingLoadingState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AddPackId")
                        .HasColumnType("int");

                    b.Property<string>("EmbeddingModelId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsAllEmbeddingsLoaded")
                        .HasColumnType("bit");

                    b.Property<int?>("ProfileId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddPackId");

                    b.HasIndex("EmbeddingModelId");

                    b.HasIndex("ProfileId")
                        .IsUnique()
                        .HasFilter("[ProfileId] IS NOT NULL");

                    b.ToTable("EmbeddingLoadingStates");
                });

            modelBuilder.Entity("Domain.Entities.Embeddings.EmbeddingObjectsGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("DRTechniqueId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("DataObjectId")
                        .HasColumnType("bigint");

                    b.Property<string>("EmbeddingModelId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("WorkspaceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DRTechniqueId");

                    b.HasIndex("DataObjectId");

                    b.HasIndex("EmbeddingModelId");

                    b.HasIndex("WorkspaceId");

                    b.ToTable("EmbeddingObjectsGroups");
                });

            modelBuilder.Entity("Domain.Entities.Quotas.CustomerQuotas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AvailableCount")
                        .HasColumnType("int");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ExpiredCount")
                        .HasColumnType("int");

                    b.Property<string>("TypeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("TypeId");

                    b.ToTable("CustomerQuotas");
                });

            modelBuilder.Entity("Domain.Entities.Quotas.QuotasLogs", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEdited")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastDeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastEditTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("TypeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("TypeId");

                    b.ToTable("QuotasLogs");
                });

            modelBuilder.Entity("Domain.Entities.Quotas.QuotasPack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("QuotasPacks");

                    b.HasData(
                        new
                        {
                            Id = 1
                        },
                        new
                        {
                            Id = 2
                        });
                });

            modelBuilder.Entity("Domain.Entities.Quotas.QuotasPackItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int>("PackId")
                        .HasColumnType("int");

                    b.Property<string>("TypeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PackId");

                    b.HasIndex("TypeId");

                    b.ToTable("QuotasPackItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Count = 1000,
                            PackId = 1,
                            TypeId = "Youtube"
                        },
                        new
                        {
                            Id = 2,
                            Count = 2000,
                            PackId = 1,
                            TypeId = "Embeddings"
                        },
                        new
                        {
                            Id = 3,
                            Count = 10000,
                            PackId = 1,
                            TypeId = "Clustering"
                        },
                        new
                        {
                            Id = 4,
                            Count = 5,
                            PackId = 1,
                            TypeId = "PublicWorkspaces"
                        },
                        new
                        {
                            Id = 5,
                            Count = 20,
                            PackId = 1,
                            TypeId = "PrivateWorkspaces"
                        },
                        new
                        {
                            Id = 6,
                            Count = 20,
                            PackId = 1,
                            TypeId = "PublicProfiles"
                        },
                        new
                        {
                            Id = 7,
                            Count = 50,
                            PackId = 1,
                            TypeId = "PrivateProfiles"
                        },
                        new
                        {
                            Id = 8,
                            Count = 1000000000,
                            PackId = 2,
                            TypeId = "Youtube"
                        },
                        new
                        {
                            Id = 9,
                            Count = 1000000000,
                            PackId = 2,
                            TypeId = "Embeddings"
                        },
                        new
                        {
                            Id = 10,
                            Count = 1000000000,
                            PackId = 2,
                            TypeId = "Clustering"
                        },
                        new
                        {
                            Id = 11,
                            Count = 1000000000,
                            PackId = 2,
                            TypeId = "PublicWorkspaces"
                        },
                        new
                        {
                            Id = 12,
                            Count = 1000000000,
                            PackId = 2,
                            TypeId = "PrivateWorkspaces"
                        },
                        new
                        {
                            Id = 13,
                            Count = 1000000000,
                            PackId = 2,
                            TypeId = "PublicProfiles"
                        },
                        new
                        {
                            Id = 14,
                            Count = 1000000000,
                            PackId = 2,
                            TypeId = "PrivateProfiles"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Quotas.QuotasPackLogs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEdited")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastDeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastEditTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("PackId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PackId");

                    b.ToTable("QuotasPackLogs");
                });

            modelBuilder.Entity("Domain.Entities.Quotas.QuotasType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("QuotasTypes");

                    b.HasData(
                        new
                        {
                            Id = "Youtube",
                            Description = "Loading data from Youtube",
                            Name = "Youtube"
                        },
                        new
                        {
                            Id = "Embeddings",
                            Description = "Creating embeddings",
                            Name = "Embeddings"
                        },
                        new
                        {
                            Id = "Clustering",
                            Description = "Clusterization of data",
                            Name = "Clustering"
                        },
                        new
                        {
                            Id = "PublicWorkspaces",
                            Description = "Creating public workspaces",
                            Name = "Public workspaces"
                        },
                        new
                        {
                            Id = "PrivateWorkspaces",
                            Description = "Creating private workspaces",
                            Name = "Private workspaces"
                        },
                        new
                        {
                            Id = "PublicProfiles",
                            Description = "Creating public profiles",
                            Name = "Public profiles"
                        },
                        new
                        {
                            Id = "PrivateProfiles",
                            Description = "Creating private profiles",
                            Name = "Private profiles"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Tasks.MyTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<float>("Percent")
                        .HasColumnType("real");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("StateId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("StateId");

                    b.ToTable("MyTasks");
                });

            modelBuilder.Entity("Domain.Entities.Tasks.MyTaskState", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MyTaskStates");

                    b.HasData(
                        new
                        {
                            Id = "Error",
                            Name = "Error"
                        },
                        new
                        {
                            Id = "Wait",
                            Name = "Wait"
                        },
                        new
                        {
                            Id = "Process",
                            Name = "Process"
                        },
                        new
                        {
                            Id = "Completed",
                            Name = "Completed"
                        },
                        new
                        {
                            Id = "Stopped",
                            Name = "Stopped"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MyDataObjectWorkspaceDataObjectsAddPack", b =>
                {
                    b.Property<long>("DataObjectsId")
                        .HasColumnType("bigint");

                    b.Property<int>("WorkspaceDataObjectsAddPacksId")
                        .HasColumnType("int");

                    b.HasKey("DataObjectsId", "WorkspaceDataObjectsAddPacksId");

                    b.HasIndex("WorkspaceDataObjectsAddPacksId");

                    b.ToTable("MyDataObjectWorkspaceDataObjectsAddPack");
                });

            modelBuilder.Entity("Domain.Entitie.Clusterization.Algorithms.Non_hierarchical.DBSCANAlgorithm", b =>
                {
                    b.HasBaseType("Domain.Entities.Clusterization.Algorithms.ClusterizationAbstactAlgorithm");

                    b.Property<double>("Epsilon")
                        .HasColumnType("float");

                    b.Property<int>("MinimumPointsPerCluster")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("DBSCANAlgorithm");
                });

            modelBuilder.Entity("Domain.Entities.Clusterization.Algorithms.Non_hierarchical.GaussianMixtureAlgorithm", b =>
                {
                    b.HasBaseType("Domain.Entities.Clusterization.Algorithms.ClusterizationAbstactAlgorithm");

                    b.Property<int>("NumberOfComponents")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("GaussianMixtureAlgorithm");
                });

            modelBuilder.Entity("Domain.Entities.Clusterization.Algorithms.Non_hierarchical.KMeansAlgorithm", b =>
                {
                    b.HasBaseType("Domain.Entities.Clusterization.Algorithms.ClusterizationAbstactAlgorithm");

                    b.Property<int>("NumClusters")
                        .HasColumnType("int");

                    b.Property<int>("Seed")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("KMeansAlgorithm");
                });

            modelBuilder.Entity("Domain.Entities.Clusterization.Algorithms.Non_hierarchical.OneClusterAlgorithm", b =>
                {
                    b.HasBaseType("Domain.Entities.Clusterization.Algorithms.ClusterizationAbstactAlgorithm");

                    b.Property<string>("ClusterColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("OneClusterAlgorithm");
                });

            modelBuilder.Entity("Domain.Entities.Clusterization.Algorithms.Non_hierarchical.SpectralClusteringAlgorithm", b =>
                {
                    b.HasBaseType("Domain.Entities.Clusterization.Algorithms.ClusterizationAbstactAlgorithm");

                    b.Property<double>("Gamma")
                        .HasColumnType("float");

                    b.Property<int>("NumClusters")
                        .HasColumnType("int");

                    b.ToTable("ClusterizationAbstractAlgorithms", t =>
                        {
                            t.Property("NumClusters")
                                .HasColumnName("SpectralClusteringAlgorithm_NumClusters");
                        });

                    b.HasDiscriminator().HasValue("SpectralClusteringAlgorithm");
                });

            modelBuilder.Entity("ClusterMyDataObject", b =>
                {
                    b.HasOne("Domain.Entities.Clusterization.Cluster", null)
                        .WithMany()
                        .HasForeignKey("ClustersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.DataObjects.MyDataObject", null)
                        .WithMany()
                        .HasForeignKey("DataObjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClusterizationWorkspaceMyDataObject", b =>
                {
                    b.HasOne("Domain.Entities.DataObjects.MyDataObject", null)
                        .WithMany()
                        .HasForeignKey("DataObjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Clusterization.Workspaces.ClusterizationWorkspace", null)
                        .WithMany()
                        .HasForeignKey("WorkspacesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Clusterization.Algorithms.ClusterizationAbstactAlgorithm", b =>
                {
                    b.HasOne("Domain.Entities.Clusterization.Algorithms.ClusterizationAlgorithmType", "Type")
                        .WithMany("ClusterizationAlgorithms")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Domain.Entities.Clusterization.Cluster", b =>
                {
                    b.HasOne("Domain.Entities.Clusterization.Cluster", "ParentCluster")
                        .WithMany("ChildClusters")
                        .HasForeignKey("ParentClusterId");

                    b.HasOne("Domain.Entities.Clusterization.Profiles.ClusterizationProfile", "Profile")
                        .WithMany("Clusters")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentCluster");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("Domain.Entities.Clusterization.Displaying.ClusterizationTile", b =>
                {
                    b.HasOne("Domain.Entities.Clusterization.Displaying.ClusterizationTile", "Parent")
                        .WithMany("ChildTiles")
                        .HasForeignKey("ParentId");

                    b.HasOne("Domain.Entities.Clusterization.Profiles.ClusterizationProfile", "Profile")
                        .WithMany("Tiles")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Clusterization.Displaying.ClusterizationTilesLevel", "TilesLevel")
                        .WithMany("Tiles")
                        .HasForeignKey("TilesLevelId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Parent");

                    b.Navigation("Profile");

                    b.Navigation("TilesLevel");
                });

            modelBuilder.Entity("Domain.Entities.Clusterization.Displaying.ClusterizationTilesLevel", b =>
                {
                    b.HasOne("Domain.Entities.Clusterization.Profiles.ClusterizationProfile", "Profile")
                        .WithMany("TilesLevels")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("Domain.Entities.Clusterization.Displaying.DisplayedPoint", b =>
                {
                    b.HasOne("Domain.Entities.Clusterization.Cluster", "Cluster")
                        .WithMany("DisplayedPoints")
                        .HasForeignKey("ClusterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.DataObjects.MyDataObject", "DataObject")
                        .WithMany("DisplayedPoints")
                        .HasForeignKey("DataObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Clusterization.Displaying.ClusterizationTile", "Tile")
                        .WithMany("Points")
                        .HasForeignKey("TileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cluster");

                    b.Navigation("DataObject");

                    b.Navigation("Tile");
                });

            modelBuilder.Entity("Domain.Entities.Clusterization.Profiles.ClusterizationProfile", b =>
                {
                    b.HasOne("Domain.Entities.Clusterization.Algorithms.ClusterizationAbstactAlgorithm", "Algorithm")
                        .WithMany("Profiles")
                        .HasForeignKey("AlgorithmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.DimensionalityReductionEntities.DimensionalityReductionTechnique", "DRTechnique")
                        .WithMany("Profiles")
                        .HasForeignKey("DRTechniqueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Embeddings.DimensionEntities.DimensionType", "DimensionType")
                        .WithMany("Profiles")
                        .HasForeignKey("DimensionCount")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.EmbeddingModels.EmbeddingModel", "EmbeddingModel")
                        .WithMany("Profiles")
                        .HasForeignKey("EmbeddingModelId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Customers.Customer", "Owner")
                        .WithMany("Profiles")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Clusterization.Workspaces.ClusterizationWorkspace", "Workspace")
                        .WithMany("Profiles")
                        .HasForeignKey("WorkspaceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Algorithm");

                    b.Navigation("DRTechnique");

                    b.Navigation("DimensionType");

                    b.Navigation("EmbeddingModel");

                    b.Navigation("Owner");

                    b.Navigation("Workspace");
                });

            modelBuilder.Entity("Domain.Entities.Clusterization.Workspaces.ClusterizationWorkspace", b =>
                {
                    b.HasOne("Domain.Entities.Customers.Customer", "Owner")
                        .WithMany("Workspaces")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Clusterization.ClusterizationType", "Type")
                        .WithMany("Workspaces")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Domain.Entities.Clusterization.Workspaces.WorkspaceDataObjectsAddPack", b =>
                {
                    b.HasOne("Domain.Entities.Customers.Customer", "Owner")
                        .WithMany("WorkspaceDataObjectsAddPacks")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Clusterization.Workspaces.ClusterizationWorkspace", "Workspace")
                        .WithMany("WorkspaceDataObjectsAddPacks")
                        .HasForeignKey("WorkspaceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Owner");

                    b.Navigation("Workspace");
                });

            modelBuilder.Entity("Domain.Entities.DataObjects.MyDataObject", b =>
                {
                    b.HasOne("Domain.Entities.DataObjects.MyDataObjectType", "Type")
                        .WithMany("DataObjects")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Domain.Entities.DataSources.ExternalData.ExternalObject", b =>
                {
                    b.HasOne("Domain.Entities.DataObjects.MyDataObject", "DataObject")
                        .WithOne("ExternalObject")
                        .HasForeignKey("Domain.Entities.DataSources.ExternalData.ExternalObject", "DataObjectId");

                    b.Navigation("DataObject");
                });

            modelBuilder.Entity("Domain.Entities.DataSources.Youtube.Channel", b =>
                {
                    b.HasOne("Domain.Entities.Customers.Customer", "Loader")
                        .WithMany("Channels")
                        .HasForeignKey("LoaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Loader");
                });

            modelBuilder.Entity("Domain.Entities.DataSources.Youtube.Comment", b =>
                {
                    b.HasOne("Domain.Entities.DataSources.Youtube.Channel", "Channel")
                        .WithMany("Comments")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.DataObjects.MyDataObject", "DataObject")
                        .WithOne("Comment")
                        .HasForeignKey("Domain.Entities.DataSources.Youtube.Comment", "DataObjectId");

                    b.HasOne("Domain.Entities.Customers.Customer", "Loader")
                        .WithMany("Comments")
                        .HasForeignKey("LoaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.DataSources.Youtube.Video", "Video")
                        .WithMany("Comments")
                        .HasForeignKey("VideoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Channel");

                    b.Navigation("DataObject");

                    b.Navigation("Loader");

                    b.Navigation("Video");
                });

            modelBuilder.Entity("Domain.Entities.DataSources.Youtube.Video", b =>
                {
                    b.HasOne("Domain.Entities.DataSources.Youtube.Channel", "Channel")
                        .WithMany("Videos")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Customers.Customer", "Loader")
                        .WithMany("Videos")
                        .HasForeignKey("LoaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Channel");

                    b.Navigation("Loader");
                });

            modelBuilder.Entity("Domain.Entities.EmbeddingModels.EmbeddingModel", b =>
                {
                    b.HasOne("Domain.Entities.Embeddings.DimensionEntities.DimensionType", "DimensionType")
                        .WithMany("EmbeddingModels")
                        .HasForeignKey("DimensionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DimensionType");
                });

            modelBuilder.Entity("Domain.Entities.Embeddings.DimensionEntities.DimensionEmbeddingObject", b =>
                {
                    b.HasOne("Domain.Entities.Embeddings.EmbeddingObjectsGroup", "EmbeddingObjectsGroup")
                        .WithMany("DimensionEmbeddingObjects")
                        .HasForeignKey("EmbeddingObjectsGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Embeddings.DimensionEntities.DimensionType", "Type")
                        .WithMany("DimensionEmbeddingObjects")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmbeddingObjectsGroup");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Domain.Entities.Embeddings.EmbeddingLoadingState", b =>
                {
                    b.HasOne("Domain.Entities.Clusterization.Workspaces.WorkspaceDataObjectsAddPack", "AddPack")
                        .WithMany("EmbeddingLoadingStates")
                        .HasForeignKey("AddPackId");

                    b.HasOne("Domain.Entities.EmbeddingModels.EmbeddingModel", "EmbeddingModel")
                        .WithMany("EmbeddingLoadingStates")
                        .HasForeignKey("EmbeddingModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Clusterization.Profiles.ClusterizationProfile", "Profile")
                        .WithOne("EmbeddingLoadingState")
                        .HasForeignKey("Domain.Entities.Embeddings.EmbeddingLoadingState", "ProfileId");

                    b.Navigation("AddPack");

                    b.Navigation("EmbeddingModel");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("Domain.Entities.Embeddings.EmbeddingObjectsGroup", b =>
                {
                    b.HasOne("Domain.Entities.DimensionalityReductionEntities.DimensionalityReductionTechnique", "DRTechnique")
                        .WithMany("Groups")
                        .HasForeignKey("DRTechniqueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.DataObjects.MyDataObject", "DataObject")
                        .WithMany("EmbeddingObjectsGroups")
                        .HasForeignKey("DataObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.EmbeddingModels.EmbeddingModel", "EmbeddingModel")
                        .WithMany("Groups")
                        .HasForeignKey("EmbeddingModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Clusterization.Workspaces.ClusterizationWorkspace", "Workspace")
                        .WithMany("EmbeddingObjectsGroups")
                        .HasForeignKey("WorkspaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DRTechnique");

                    b.Navigation("DataObject");

                    b.Navigation("EmbeddingModel");

                    b.Navigation("Workspace");
                });

            modelBuilder.Entity("Domain.Entities.Quotas.CustomerQuotas", b =>
                {
                    b.HasOne("Domain.Entities.Customers.Customer", "Customer")
                        .WithMany("Quotas")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Quotas.QuotasType", "Type")
                        .WithMany("CustomerQuotas")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Domain.Entities.Quotas.QuotasLogs", b =>
                {
                    b.HasOne("Domain.Entities.Customers.Customer", "Customer")
                        .WithMany("QuotasLogsCollection")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Quotas.QuotasType", "Type")
                        .WithMany("QuotasLogsCollection")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Domain.Entities.Quotas.QuotasPackItem", b =>
                {
                    b.HasOne("Domain.Entities.Quotas.QuotasPack", "Pack")
                        .WithMany("Items")
                        .HasForeignKey("PackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Quotas.QuotasType", "Type")
                        .WithMany("PackItems")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pack");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Domain.Entities.Quotas.QuotasPackLogs", b =>
                {
                    b.HasOne("Domain.Entities.Customers.Customer", "Customer")
                        .WithMany("QuotasPackLogsCollection")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Quotas.QuotasPack", "Pack")
                        .WithMany("Logs")
                        .HasForeignKey("PackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Pack");
                });

            modelBuilder.Entity("Domain.Entities.Tasks.MyTask", b =>
                {
                    b.HasOne("Domain.Entities.Customers.Customer", "Customer")
                        .WithMany("Tasks")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Tasks.MyTaskState", "State")
                        .WithMany("Tasks")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("State");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Domain.Entities.Customers.Customer", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Domain.Entities.Customers.Customer", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Customers.Customer", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Domain.Entities.Customers.Customer", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyDataObjectWorkspaceDataObjectsAddPack", b =>
                {
                    b.HasOne("Domain.Entities.DataObjects.MyDataObject", null)
                        .WithMany()
                        .HasForeignKey("DataObjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Clusterization.Workspaces.WorkspaceDataObjectsAddPack", null)
                        .WithMany()
                        .HasForeignKey("WorkspaceDataObjectsAddPacksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Clusterization.Algorithms.ClusterizationAbstactAlgorithm", b =>
                {
                    b.Navigation("Profiles");
                });

            modelBuilder.Entity("Domain.Entities.Clusterization.Algorithms.ClusterizationAlgorithmType", b =>
                {
                    b.Navigation("ClusterizationAlgorithms");
                });

            modelBuilder.Entity("Domain.Entities.Clusterization.Cluster", b =>
                {
                    b.Navigation("ChildClusters");

                    b.Navigation("DisplayedPoints");
                });

            modelBuilder.Entity("Domain.Entities.Clusterization.ClusterizationType", b =>
                {
                    b.Navigation("Workspaces");
                });

            modelBuilder.Entity("Domain.Entities.Clusterization.Displaying.ClusterizationTile", b =>
                {
                    b.Navigation("ChildTiles");

                    b.Navigation("Points");
                });

            modelBuilder.Entity("Domain.Entities.Clusterization.Displaying.ClusterizationTilesLevel", b =>
                {
                    b.Navigation("Tiles");
                });

            modelBuilder.Entity("Domain.Entities.Clusterization.Profiles.ClusterizationProfile", b =>
                {
                    b.Navigation("Clusters");

                    b.Navigation("EmbeddingLoadingState")
                        .IsRequired();

                    b.Navigation("Tiles");

                    b.Navigation("TilesLevels");
                });

            modelBuilder.Entity("Domain.Entities.Clusterization.Workspaces.ClusterizationWorkspace", b =>
                {
                    b.Navigation("EmbeddingObjectsGroups");

                    b.Navigation("Profiles");

                    b.Navigation("WorkspaceDataObjectsAddPacks");
                });

            modelBuilder.Entity("Domain.Entities.Clusterization.Workspaces.WorkspaceDataObjectsAddPack", b =>
                {
                    b.Navigation("EmbeddingLoadingStates");
                });

            modelBuilder.Entity("Domain.Entities.Customers.Customer", b =>
                {
                    b.Navigation("Channels");

                    b.Navigation("Comments");

                    b.Navigation("Profiles");

                    b.Navigation("Quotas");

                    b.Navigation("QuotasLogsCollection");

                    b.Navigation("QuotasPackLogsCollection");

                    b.Navigation("Tasks");

                    b.Navigation("Videos");

                    b.Navigation("WorkspaceDataObjectsAddPacks");

                    b.Navigation("Workspaces");
                });

            modelBuilder.Entity("Domain.Entities.DataObjects.MyDataObject", b =>
                {
                    b.Navigation("Comment");

                    b.Navigation("DisplayedPoints");

                    b.Navigation("EmbeddingObjectsGroups");

                    b.Navigation("ExternalObject");
                });

            modelBuilder.Entity("Domain.Entities.DataObjects.MyDataObjectType", b =>
                {
                    b.Navigation("DataObjects");
                });

            modelBuilder.Entity("Domain.Entities.DataSources.Youtube.Channel", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Videos");
                });

            modelBuilder.Entity("Domain.Entities.DataSources.Youtube.Video", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("Domain.Entities.DimensionalityReductionEntities.DimensionalityReductionTechnique", b =>
                {
                    b.Navigation("Groups");

                    b.Navigation("Profiles");
                });

            modelBuilder.Entity("Domain.Entities.EmbeddingModels.EmbeddingModel", b =>
                {
                    b.Navigation("EmbeddingLoadingStates");

                    b.Navigation("Groups");

                    b.Navigation("Profiles");
                });

            modelBuilder.Entity("Domain.Entities.Embeddings.DimensionEntities.DimensionType", b =>
                {
                    b.Navigation("DimensionEmbeddingObjects");

                    b.Navigation("EmbeddingModels");

                    b.Navigation("Profiles");
                });

            modelBuilder.Entity("Domain.Entities.Embeddings.EmbeddingObjectsGroup", b =>
                {
                    b.Navigation("DimensionEmbeddingObjects");
                });

            modelBuilder.Entity("Domain.Entities.Quotas.QuotasPack", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("Logs");
                });

            modelBuilder.Entity("Domain.Entities.Quotas.QuotasType", b =>
                {
                    b.Navigation("CustomerQuotas");

                    b.Navigation("PackItems");

                    b.Navigation("QuotasLogsCollection");
                });

            modelBuilder.Entity("Domain.Entities.Tasks.MyTaskState", b =>
                {
                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
