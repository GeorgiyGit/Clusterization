// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ClusterizationDbContext))]
    [Migration("20231030180308_add-min-max-values-to-tiles-level")]
    partial class addminmaxvaluestotileslevel
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ClusterClusterizationEntity", b =>
                {
                    b.Property<int>("ClustersId")
                        .HasColumnType("int");

                    b.Property<int>("EntitiesId")
                        .HasColumnType("int");

                    b.HasKey("ClustersId", "EntitiesId");

                    b.HasIndex("EntitiesId");

                    b.ToTable("ClusterClusterizationEntity");
                });

            modelBuilder.Entity("ClusterizationWorkspaceComment", b =>
                {
                    b.Property<string>("CommentsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("WorkspacesId")
                        .HasColumnType("int");

                    b.HasKey("CommentsId", "WorkspacesId");

                    b.HasIndex("WorkspacesId");

                    b.ToTable("ClusterizationWorkspaceComment");
                });

            modelBuilder.Entity("Domain.Entities.Clusterization.Algorithms.ClusterizationAbstactAlgorithm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("ClusterizationAbstractAlgorithms");

                    b.HasDiscriminator<string>("Discriminator").HasValue("ClusterizationAbstactAlgorithm");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Domain.Entities.Clusterization.Algorithms.ClusterizationAlgorithmType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ClusterizationAlgorithmType");

                    b.HasData(
                        new
                        {
                            Id = "KMeans",
                            Description = "Впорядкування множини об'єктів у порівняно однорідні групи.",
                            Name = "k-means"
                        },
                        new
                        {
                            Id = "OneCluster",
                            Description = "Об'єднання елементів в один кластер",
                            Name = "Один кластер"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Clusterization.Cluster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentClusterId")
                        .HasColumnType("int");

                    b.Property<int>("ProfileId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentClusterId");

                    b.HasIndex("ProfileId");

                    b.ToTable("Clusters");
                });

            modelBuilder.Entity("Domain.Entities.Clusterization.ClusterizationDimensionType", b =>
                {
                    b.Property<int>("DimensionCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DimensionCount"));

                    b.HasKey("DimensionCount");

                    b.ToTable("ClusterizationDimensionTypes");

                    b.HasData(
                        new
                        {
                            DimensionCount = 2
                        },
                        new
                        {
                            DimensionCount = 3
                        },
                        new
                        {
                            DimensionCount = 100
                        },
                        new
                        {
                            DimensionCount = 1536
                        });
                });

            modelBuilder.Entity("Domain.Entities.Clusterization.ClusterizationEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CommentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("EmbeddingDataId")
                        .HasColumnType("int");

                    b.Property<int>("WorkspaceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("EmbeddingDataId");

                    b.HasIndex("WorkspaceId");

                    b.ToTable("ClusterizationEntites");
                });

            modelBuilder.Entity("Domain.Entities.Clusterization.ClusterizationProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AlgorithmId")
                        .HasColumnType("int");

                    b.Property<int>("DimensionCount")
                        .HasColumnType("int");

                    b.Property<bool>("IsCalculated")
                        .HasColumnType("bit");

                    b.Property<int>("MaxTileLevel")
                        .HasColumnType("int");

                    b.Property<int>("MinTileLevel")
                        .HasColumnType("int");

                    b.Property<int>("WorkspaceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AlgorithmId");

                    b.HasIndex("DimensionCount");

                    b.HasIndex("WorkspaceId");

                    b.ToTable("ClusterizationProfiles");
                });

            modelBuilder.Entity("Domain.Entities.Clusterization.ClusterizationTile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Length")
                        .HasColumnType("float");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int>("ProfileId")
                        .HasColumnType("int");

                    b.Property<int>("TilesLevelId")
                        .HasColumnType("int");

                    b.Property<int>("X")
                        .HasColumnType("int");

                    b.Property<int>("Y")
                        .HasColumnType("int");

                    b.Property<int>("Z")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("ProfileId");

                    b.HasIndex("TilesLevelId");

                    b.ToTable("ClusterizationTiles");
                });

            modelBuilder.Entity("Domain.Entities.Clusterization.ClusterizationTilesLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("MaxXValue")
                        .HasColumnType("float");

                    b.Property<double>("MaxYValue")
                        .HasColumnType("float");

                    b.Property<double>("MinXValue")
                        .HasColumnType("float");

                    b.Property<double>("MinYValue")
                        .HasColumnType("float");

                    b.Property<int>("ProfileId")
                        .HasColumnType("int");

                    b.Property<int>("TileCount")
                        .HasColumnType("int");

                    b.Property<double>("TileLength")
                        .HasColumnType("float");

                    b.Property<int>("Z")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.ToTable("ClusterizationTilesLevels");
                });

            modelBuilder.Entity("Domain.Entities.Clusterization.ClusterizationType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ClusterizationTypes");

                    b.HasData(
                        new
                        {
                            Id = "Comments",
                            Name = "Коментарі"
                        },
                        new
                        {
                            Id = "Videos",
                            Name = "Відео"
                        },
                        new
                        {
                            Id = "Channels",
                            Name = "Канали"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Clusterization.ClusterizationWorkspace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAllDataEmbedded")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("ClusterizationWorkspaces");
                });

            modelBuilder.Entity("Domain.Entities.Clusterization.DisplayedPoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClusterId")
                        .HasColumnType("int");

                    b.Property<int>("OptimizationLevel")
                        .HasColumnType("int");

                    b.Property<int>("TileId")
                        .HasColumnType("int");

                    b.Property<string>("ValueId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("X")
                        .HasColumnType("float");

                    b.Property<double>("Y")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ClusterId");

                    b.HasIndex("TileId");

                    b.ToTable("DisplayedPoints");
                });

            modelBuilder.Entity("Domain.Entities.Embeddings.EmbeddingData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CommentId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CommentId")
                        .IsUnique()
                        .HasFilter("[CommentId] IS NOT NULL");

                    b.ToTable("EmbeddingDatas");
                });

            modelBuilder.Entity("Domain.Entities.Embeddings.EmbeddingDimensionValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DimensionTypeId")
                        .HasColumnType("int");

                    b.Property<int>("EmbeddingDataId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DimensionTypeId");

                    b.HasIndex("EmbeddingDataId");

                    b.ToTable("EmbeddingDimensionValues");
                });

            modelBuilder.Entity("Domain.Entities.Embeddings.EmbeddingValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EmbeddingDimensionValueId")
                        .HasColumnType("int");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("EmbeddingDimensionValueId");

                    b.ToTable("EmbeddingValues");
                });

            modelBuilder.Entity("Domain.Entities.Tasks.MyTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<float>("Percent")
                        .HasColumnType("real");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("StateId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.ToTable("MyTasks");
                });

            modelBuilder.Entity("Domain.Entities.Tasks.MyTaskState", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MyTaskStates");

                    b.HasData(
                        new
                        {
                            Id = "Error",
                            Name = "Помилка"
                        },
                        new
                        {
                            Id = "Wait",
                            Name = "Очікування"
                        },
                        new
                        {
                            Id = "Process",
                            Name = "Виконується"
                        },
                        new
                        {
                            Id = "Completed",
                            Name = "Виконалася"
                        },
                        new
                        {
                            Id = "Stopped",
                            Name = "Призупинено"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Youtube.Channel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ChannelImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ETag")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LoadedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PublishedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTimeOffset>("PublishedAtDateTimeOffset")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("PublishedAtRaw")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("SubscriberCount")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VideoCount")
                        .HasColumnType("int");

                    b.Property<long>("ViewCount")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Channels");
                });

            modelBuilder.Entity("Domain.Entities.Youtube.Comment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AuthorChannelId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AuthorChannelUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AuthorDisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AuthorProfileImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CanReply")
                        .HasColumnType("bit");

                    b.Property<string>("ChannelId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ETag")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmbeddingDataId")
                        .HasColumnType("int");

                    b.Property<int>("LikeCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("LoadedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PublishedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTimeOffset>("PublishedAtDateTimeOffset")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("PublishedAtRaw")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TextDisplay")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TextOriginal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("TotalReplyCount")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTimeOffset>("UpdatedAtDateTimeOffset")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdatedAtRaw")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VideoId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.HasIndex("VideoId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Domain.Entities.Youtube.Video", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChannelId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ChannelTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CommentCount")
                        .HasColumnType("int");

                    b.Property<string>("DefaultAudioLanguage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DefaultLanguage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ETag")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LikeCount")
                        .HasColumnType("int");

                    b.Property<string>("LiveBroadcaseContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LoadedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PublishedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTimeOffset>("PublishedAtDateTimeOffset")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("PublishedAtRaw")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VideoImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ViewCount")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.ToTable("Videos");
                });

            modelBuilder.Entity("Domain.Entities.Clusterization.Algorithms.Non_hierarchical.KMeansAlgorithm", b =>
                {
                    b.HasBaseType("Domain.Entities.Clusterization.Algorithms.ClusterizationAbstactAlgorithm");

                    b.Property<int>("NumClusters")
                        .HasColumnType("int");

                    b.Property<int>("Seed")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("KMeansAlgorithm");
                });

            modelBuilder.Entity("Domain.Entities.Clusterization.Algorithms.Non_hierarchical.OneClusterAlgorithm", b =>
                {
                    b.HasBaseType("Domain.Entities.Clusterization.Algorithms.ClusterizationAbstactAlgorithm");

                    b.Property<string>("ClusterColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("OneClusterAlgorithm");
                });

            modelBuilder.Entity("ClusterClusterizationEntity", b =>
                {
                    b.HasOne("Domain.Entities.Clusterization.Cluster", null)
                        .WithMany()
                        .HasForeignKey("ClustersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Clusterization.ClusterizationEntity", null)
                        .WithMany()
                        .HasForeignKey("EntitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClusterizationWorkspaceComment", b =>
                {
                    b.HasOne("Domain.Entities.Youtube.Comment", null)
                        .WithMany()
                        .HasForeignKey("CommentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Clusterization.ClusterizationWorkspace", null)
                        .WithMany()
                        .HasForeignKey("WorkspacesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Clusterization.Algorithms.ClusterizationAbstactAlgorithm", b =>
                {
                    b.HasOne("Domain.Entities.Clusterization.Algorithms.ClusterizationAlgorithmType", "Type")
                        .WithMany("ClusterizationAlgorithms")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Domain.Entities.Clusterization.Cluster", b =>
                {
                    b.HasOne("Domain.Entities.Clusterization.Cluster", "ParentCluster")
                        .WithMany("ChildClusters")
                        .HasForeignKey("ParentClusterId");

                    b.HasOne("Domain.Entities.Clusterization.ClusterizationProfile", "Profile")
                        .WithMany("Clusters")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentCluster");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("Domain.Entities.Clusterization.ClusterizationEntity", b =>
                {
                    b.HasOne("Domain.Entities.Youtube.Comment", "Comment")
                        .WithMany("ClusterizationEntities")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Embeddings.EmbeddingData", "EmbeddingData")
                        .WithMany("Entities")
                        .HasForeignKey("EmbeddingDataId");

                    b.HasOne("Domain.Entities.Clusterization.ClusterizationWorkspace", "Workspace")
                        .WithMany("Entities")
                        .HasForeignKey("WorkspaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("EmbeddingData");

                    b.Navigation("Workspace");
                });

            modelBuilder.Entity("Domain.Entities.Clusterization.ClusterizationProfile", b =>
                {
                    b.HasOne("Domain.Entities.Clusterization.Algorithms.ClusterizationAbstactAlgorithm", "Algorithm")
                        .WithMany("Profiles")
                        .HasForeignKey("AlgorithmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Clusterization.ClusterizationDimensionType", "DimensionType")
                        .WithMany("Profiles")
                        .HasForeignKey("DimensionCount")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Clusterization.ClusterizationWorkspace", "Workspace")
                        .WithMany("Profiles")
                        .HasForeignKey("WorkspaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Algorithm");

                    b.Navigation("DimensionType");

                    b.Navigation("Workspace");
                });

            modelBuilder.Entity("Domain.Entities.Clusterization.ClusterizationTile", b =>
                {
                    b.HasOne("Domain.Entities.Clusterization.ClusterizationTile", "Parent")
                        .WithMany("ChildTiles")
                        .HasForeignKey("ParentId");

                    b.HasOne("Domain.Entities.Clusterization.ClusterizationProfile", "Profile")
                        .WithMany("Tiles")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Clusterization.ClusterizationTilesLevel", "TilesLevel")
                        .WithMany("Tiles")
                        .HasForeignKey("TilesLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parent");

                    b.Navigation("Profile");

                    b.Navigation("TilesLevel");
                });

            modelBuilder.Entity("Domain.Entities.Clusterization.ClusterizationTilesLevel", b =>
                {
                    b.HasOne("Domain.Entities.Clusterization.ClusterizationProfile", "Profile")
                        .WithMany("TilesLevels")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("Domain.Entities.Clusterization.ClusterizationWorkspace", b =>
                {
                    b.HasOne("Domain.Entities.Clusterization.ClusterizationType", "Type")
                        .WithMany("Workspaces")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Domain.Entities.Clusterization.DisplayedPoint", b =>
                {
                    b.HasOne("Domain.Entities.Clusterization.Cluster", "Cluster")
                        .WithMany("DisplayedPoints")
                        .HasForeignKey("ClusterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Clusterization.ClusterizationTile", "Tile")
                        .WithMany("Points")
                        .HasForeignKey("TileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cluster");

                    b.Navigation("Tile");
                });

            modelBuilder.Entity("Domain.Entities.Embeddings.EmbeddingData", b =>
                {
                    b.HasOne("Domain.Entities.Youtube.Comment", "Comment")
                        .WithOne("EmbeddingData")
                        .HasForeignKey("Domain.Entities.Embeddings.EmbeddingData", "CommentId");

                    b.Navigation("Comment");
                });

            modelBuilder.Entity("Domain.Entities.Embeddings.EmbeddingDimensionValue", b =>
                {
                    b.HasOne("Domain.Entities.Clusterization.ClusterizationDimensionType", "DimensionType")
                        .WithMany("DimensionValues")
                        .HasForeignKey("DimensionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Embeddings.EmbeddingData", "EmbeddingData")
                        .WithMany("Embeddings")
                        .HasForeignKey("EmbeddingDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DimensionType");

                    b.Navigation("EmbeddingData");
                });

            modelBuilder.Entity("Domain.Entities.Embeddings.EmbeddingValue", b =>
                {
                    b.HasOne("Domain.Entities.Embeddings.EmbeddingDimensionValue", "EmbeddingDimensionValue")
                        .WithMany("Values")
                        .HasForeignKey("EmbeddingDimensionValueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmbeddingDimensionValue");
                });

            modelBuilder.Entity("Domain.Entities.Tasks.MyTask", b =>
                {
                    b.HasOne("Domain.Entities.Tasks.MyTaskState", "State")
                        .WithMany("Tasks")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("State");
                });

            modelBuilder.Entity("Domain.Entities.Youtube.Comment", b =>
                {
                    b.HasOne("Domain.Entities.Youtube.Channel", "Channel")
                        .WithMany("Comments")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Youtube.Video", "Video")
                        .WithMany("Comments")
                        .HasForeignKey("VideoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Channel");

                    b.Navigation("Video");
                });

            modelBuilder.Entity("Domain.Entities.Youtube.Video", b =>
                {
                    b.HasOne("Domain.Entities.Youtube.Channel", "Channel")
                        .WithMany("Videos")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Channel");
                });

            modelBuilder.Entity("Domain.Entities.Clusterization.Algorithms.ClusterizationAbstactAlgorithm", b =>
                {
                    b.Navigation("Profiles");
                });

            modelBuilder.Entity("Domain.Entities.Clusterization.Algorithms.ClusterizationAlgorithmType", b =>
                {
                    b.Navigation("ClusterizationAlgorithms");
                });

            modelBuilder.Entity("Domain.Entities.Clusterization.Cluster", b =>
                {
                    b.Navigation("ChildClusters");

                    b.Navigation("DisplayedPoints");
                });

            modelBuilder.Entity("Domain.Entities.Clusterization.ClusterizationDimensionType", b =>
                {
                    b.Navigation("DimensionValues");

                    b.Navigation("Profiles");
                });

            modelBuilder.Entity("Domain.Entities.Clusterization.ClusterizationProfile", b =>
                {
                    b.Navigation("Clusters");

                    b.Navigation("Tiles");

                    b.Navigation("TilesLevels");
                });

            modelBuilder.Entity("Domain.Entities.Clusterization.ClusterizationTile", b =>
                {
                    b.Navigation("ChildTiles");

                    b.Navigation("Points");
                });

            modelBuilder.Entity("Domain.Entities.Clusterization.ClusterizationTilesLevel", b =>
                {
                    b.Navigation("Tiles");
                });

            modelBuilder.Entity("Domain.Entities.Clusterization.ClusterizationType", b =>
                {
                    b.Navigation("Workspaces");
                });

            modelBuilder.Entity("Domain.Entities.Clusterization.ClusterizationWorkspace", b =>
                {
                    b.Navigation("Entities");

                    b.Navigation("Profiles");
                });

            modelBuilder.Entity("Domain.Entities.Embeddings.EmbeddingData", b =>
                {
                    b.Navigation("Embeddings");

                    b.Navigation("Entities");
                });

            modelBuilder.Entity("Domain.Entities.Embeddings.EmbeddingDimensionValue", b =>
                {
                    b.Navigation("Values");
                });

            modelBuilder.Entity("Domain.Entities.Tasks.MyTaskState", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("Domain.Entities.Youtube.Channel", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Videos");
                });

            modelBuilder.Entity("Domain.Entities.Youtube.Comment", b =>
                {
                    b.Navigation("ClusterizationEntities");

                    b.Navigation("EmbeddingData");
                });

            modelBuilder.Entity("Domain.Entities.Youtube.Video", b =>
                {
                    b.Navigation("Comments");
                });
#pragma warning restore 612, 618
        }
    }
}
